#+TITLE: 编程语言
#+AUTHOR: Liu, Shijie
#+LANGUAGE: zh
#+TEXINFO_DIR_CATEGORY: Emacs
#+OPTIONS: ^:{} toc:t H:5 num:0

* 目录
- [[#shell-%E8%84%9A%E6%9C%AC][shell 脚本]]

- [[#octave][octave]]

- [[#fortran][fortran]]

* 写在前头
- 变量的表示方法



* shell 脚本
- shebang，魔数，幻数
#+BEGIN_SRC shell
#!/bin/bash
# comment lines
#+END_SRC
- 命令行下输入命令，没有给定路径时，系统默认到$PATH中查找；
** 变量
- 环境变量：作用域为当前 shell 进程及其子进程；

  - export VARNAME=VALUE 或 VARNAME=VALUE；export VARNAME

- 本地变量 (局部变量)：
  - VARNAME=VALUE：本地变量，整个 bash 进程；
  - local VARNAME=VALUE; 局部变量，
- 位置变量：引用脚本位置
- 特殊变量：
  $?：上一个命令的执行状态返回值
- 脚本在执行时会启动一个子 shell 进程
  - 命令行中启动的脚本会继承当前 shell 环境变量；
  - 系统自动执行的脚本（非命令行启动）需要自我定义需要的环境变量；
- ‘’为强替换，“”为
- 引用变量：${VARNAME}
  - 在变量名不引起混淆的情况下，花括号可以省略；
  - 
- 撤销变量：unset VARNAME
- 查看变量
  - env, printenv, export：查看当前 shell 中的环境变量
  - set 查看当前 shell 中的所有变量，包括环境变量

** 条件测试
*** 条件测试的表达式
#+BEGIN_SRC shell
[ expression ]   # 中括号中必须要有空格
[[ expression ]]
test expression
#+END_SRC

*** 整数测试：
- -eq
#+BEGIN_SRC shell
[shijieliu@localhost ~]$ a=3;b=6;[ $a -eq $b ];echo $?
1
#+END_SRC
- -ne
- -gt
- -lt
- -ge
- -le
*** 字符测试；
*** 文件测试：
*** 逻辑测试
- &&
#+BEGIN_SRC shell
[shijieliu@localhost ~]$ id shijieliu &> /dev/null && echo "hello, $USER"
hello, shijieliu
#+END_SRC
- ||
- !
#+BEGIN_SRC shell
[shijieliu@localhost ~]$ ! id shijieliu && useradd shijieliu
#+END_SRC
* octave
** 安装
*** fedora 27 下
    - octave 安装
      #+BEGIN_SRC shell
      $ yum install octave
      #+END_SRC
    - netcdf 包安装
      #+BEGIN_SRC shell
      $ yum install netcdf-devel
      $ yum install octave-netcdf
      #+END_SRC
    - 使用
      #+BEGIN_SRC octave
      pkg load netcdf
      #+END_SRC


** 命令行下调试
*** dbstop, 为程序设置断点
     #+BEGIN_SRC octave
     dbstop /func/
     dbstop func line
     dbstop func line1 line2
     dbstop line1
     dbstop in func
     dbstop in func at line
     dbstop in func at line if "condition"
     dbstop if event
     dbstop if event ID
     dbstop (bp_struct)
     rline = dbstop
     #+END_SRC

*** dbstatus, 反馈有效断点的位置
   #+BEGIN_EXAMPLE
   *dbstatus* /func/
   bp_list = *dbstatus* ...
   #+END_EXAMPLE

*** dbclear, 清除断点
#+BEGIN_QUOTE
*dbclear* /func/

*dbclear* /func line/

*dbclear* /func line1 line2/

*dbclear* /line .../

*dbclear* /in func/

*dbclear* /in func at line/

*dbclear* /if event/

*dbclear* /("/func/")

*dbclear* /("func",line)/

*dbclear* /("func",line1,line2,...)/

*dbclear* /("func",line1,...)/

*dbclear* /(line,...)/

*dbclear* /("all")/
#+END_QUOTE

*** dbstep
#+BEGIN_QUOTE
*dbstep*

*dbstep* /n/

*dbstep* /in/

*dbstep* /out/

*dbnext*
#+END_QUOTE

*** dbcont
离开命令行调试模式，继续执行程序。

*** dbquit
退出调试模式，不执行后续程序，回到 octave 界面。

* fortran
一份 Fortran 网页版[[https://www.yiibai.com/fortran/][教程]]。
一段简单的 Fortran 代码
#+BEGIN_SRC fortran
program addNumbers

! This simple program adds two numbers
   implicit none

! Type declarations
   real :: a, b, result

! Executable statements
   a = 12.0
   b = 15.0
   result = a + b
   print *, 'The total is ', result

end program addNumbers
#+END_SRC

** 基本语法、常变量及运算符
- 所有Fortran程序start关键字程序和end关键字结束程序，然后是该程序的名称。
- 隐无语句允许编译器检查所有的变量类型是正确声明。必须始终使用无隐在每个程序的开始。
- 在Fortran语言注释开始使用感叹号(!)，因为在这之后的所有字符 (除字符串) 被编译器忽略。
- print*命令在屏幕上显示数据。
- 代码行缩进，是保持一个程序读取一个很好的做法。
- Fortran语言允许大写和小写字母。 Fortran语言是区分大小写的，除了字符串常量。
- 标识符用于标识一个变量、过程或任何其他用户定义的项目的名称，使用时需注意一下几点：
  - 不能超过31个字符；
  - 必须由字母数字字符和下划线组成；
  - 第一个字符必须是字母；
  - 区分大小写；

*** 数据类型
提供五种内在数据类型：整型 Integer；实型 Real；复数型 Complex；逻辑型 Logical；字符型 Character。
#+begin_src fortran
program division
implicit none

   ! Define real variables
   real :: p, q, realRes

   ! Define integer variables
   integer :: i, j, intRes

   ! Assigning  values
   p = 2.0
   q = 3.0
   i = 2
   j = 3

   ! floating point division
   realRes = p/q
   intRes = i/j

   print *, realRes
   print *, intRes

end program division
#+end_src

*** 变量
附上一个例子：
#+begin_src fortran
program variableTesting
implicit none

   ! declaring variables
   integer :: total
   real :: average
   complex :: cx
   logical :: done
   character(len=80) :: message ! a string of 80 characters

   !assigning values
   total = 20000
   average = 1666.67
   done = .true.      ! .false. 注意前后的两个点
   message = "A big Hello from Tutorials Yiibai"
   cx = (3.0, 5.0) ! cx = 3.0 + 5.0i

   Print *, total
   Print *, average
   Print *, cx
   Print *, done
   Print *, message

end program variableTesting
#+end_src

*** 常量
命名常量应该在程序或过程的开始声明，就像一个变量的类型声明，说明其名称和类型。命名常量与参数属性声明。parameter 为常量的标志。
#+BEGIN_SRC fortran
real, parameter :: pi = 3.1415927
#+END_SRC

*** 运算符
- 算数运算符
  - + - * /
  - ** (乘方)
- 关系运算符
  - == .eq.
  - /= .ne.
  - >  .gt.
  - <  .lt.
  - >= .ge.
  - <= .le.
- 逻辑运算符
  - .and.
  - .or.
  - .not.
  - .eqv.
  - .neqv.

*** 运算符优先级
| 分类          | 运算符    | 关联     |
|---------------+-----------+----------|
| 逻辑NOT和负号 | .not. (-) | 从左到右 |
| 幂            | **        | 从左到右 |
| 乘            | * /       | 从左到右 |
| 加            | + -       | 从左到右 |
| 关系          | < <= > >= | 从左到右 |
| 相等          | == !=     | 从左到右 |
| 逻辑与        | .and.     | 从左到右 |
| 逻辑或        | .or.      | 从左到右 |
| 赋值          | =         | 从右到左 |

** 结构
*** 选择结构
| 语句                     | 描述                                                                                                                                                            |
| If… then 结构            | if… then… end if 语句由一个逻辑表达式后跟一个或多个语句。                                                                                                       |
| If… then...else 结构     | if… then语句可以后跟一个可选的 else statement, 它执行时，逻辑表达式为假。                                                                                       |
| if...else if...else 结构 | if 语句构建体可具有一个或多个可选的 else-if 结构。当 if 条件不满足，则紧跟 else-if 执行。当 else-if 还失败，其继续 else-if 语句（如果有的话）被执行，依此类推。 |
| 内嵌 if 结构             | 可以使用一个 if 或 else if 语句在另外一个 if 或 else if 语句内部                                                                                                |
| select case 语句.        | Select Case语句允许一个变量的值对的列表，平等进行测试。                                                                                                         |
| 内嵌select case 结构     | 可以使用一个SELECT CASE语句中的另一个选择case语句。                                                                                                             |
**** if...then 语句结构
#+BEGIN_SRC fortran
[name:] if (logical expression) then
   ! various statements
   . . .
end if [name]
#+END_SRC
示例，执行结果为：Grade A
#+BEGIN_SRC fortran
program markGradeA
implicit none
   real :: marks
   ! assign marks
   marks = 90.4
   ! use an if statement to give grade

   gr: if (marks > 90.0) then
   print *, " Grade A"
   end if gr
end program markGradeA
#+END_SRC
**** if...then...else 语句结构
#+BEGIN_SRC fortran
[name:] if (logical expression) then
   ! various statements
   . . .
   else
   !other statement(s)
   . . .
end if [name]
#+END_SRC
示例，执行结果为：
#+BEGIN_SRC fortran
program ifElseProg
implicit none
   ! local variable declaration
   integer :: a = 100

   ! check the logical condition using if statement
   if (a < 20 ) then

   ! if condition is true then print the following
   print*, "a is less than 20"
   else
   print*, "a is not less than 20"
   end if

   print*, "value of a is ", a

end program ifElseProg
#+END_SRC
执行结果为：
#+BEGIN_SRC fortran
a is not less than 20
value of a is 100
#+END_fortran
**** if...else if...else 语句结构
#+BEGIN_SRC fortran
[name:]
if (logical expression 1) then
   ! block 1
else if (logical expression 2) then
   ! block 2
else if (logical expression 3) then
   ! block 3
else
   ! block 4
end if [name]
#+END_SRC
示例
#+BEGIN_SRC fortran
program ifElseIfElseProg
implicit none

   ! local variable declaration
   integer :: a = 100

   ! check the logical condition using if statement
   if( a == 10 ) then

      ! if condition is true then print the following
      print*, "Value of a is 10"

   else if( a == 20 ) then

      ! if else if condition is true
      print*, "Value of a is 20"

   else if( a == 30 ) then

      ! if else if condition is true
      print*, "Value of a is 30"

   else

      ! if none of the conditions is true
      print*, "None of the values is matching"

   end if

   print*, "exact value of a is ", a

end program ifElseIfElseProg
#+END_SRC
**** 嵌套 if 语句结构
#+BEGIN_SRC fortran
if ( logical_expression 1) then
   !Executes when the boolean expression 1 is true
   …
   if(logical_expression 2)then
   ! Executes when the boolean expression 2 is true
   …
   end if
end if
#+END_SRC
示例
#+BEGIN_SRC fortran
program nestedIfProg
implicit none
   ! local variable declaration
   integer :: a = 100, b= 200

   ! check the logical condition using if statement
   if( a == 100 ) then

   ! if condition is true then check the following

   if( b == 200 ) then

   ! if inner if condition is true
   print*, "Value of a is 100 and b is 200"

   end if
   end if

   print*, "exact value of a is ", a
   print*, "exact value of b is ", b

end program nestedIfProg
#+END_SRC

**** select case 结构
#+BEGIN_SRC fortran
[name:] select case (expression)
   case (selector1)
   ! some statements
   ... case (selector2)
   ! other statements
   ...
   case default
   ! more statements
   ...
end select [name]
#+END_SRC

相当于MATLAB的 switch case 结构，
- 在select 语句中使用的逻辑表达式可以是逻辑型，字符型或整型（但不是实型）的表达式。
- 可以有任意数量的范围内选择一个case语句。每一种情况下后跟的值进行比较，以及可能是合乎逻辑的，字符或整数（但不是真正的）的表达，并确定哪个语句被执行。
- 恒定表达的情况下，必须具有相同的数据类型，如在选择的变量，并且它必须是一个常量或文字。
- 当被选择的变量等于以下这种情况的某一情况，该语句将执行，如果没有匹配，那直到下一个case语句为止。
- 如果在选择的情况下（表达式）表达式不匹配任何的选择了，那么 default 块被执行。

*示例*
#+BEGIN_SRC fortran
program selectCaseProg
implicit none

   ! local variable declaration
   character :: grade = 'B'

   select case (grade)

      case ('A')
      print*, "Excellent!"

      case ('B')

      case ('C')
         print*, "Well done"

      case ('D')
         print*, "You passed"

      case ('F')
         print*, "Better try again"

      case default
         print*, "Invalid grade"

   end select

   print*, "Your grade is ", grade

end program selectCaseProg
#+END_SRC
指定一个范围的选择 case(low:high)

*示例*
#+BEGIN_SRC fortran
program selectCaseProg
implicit none

   ! local variable declaration
   integer :: marks = 78

   select case (marks)

      case (91:100)
         print*, "Excellent!"

      case (81:90)
         print*, "Very good!"

      case (71:80)
         print*, "Well done!"

      case (61:70)
         print*, "Not bad!"

      case (41:60)
         print*, "You passed!"

      case (:40)
         print*, "Better try again!"

      case default
         print*, "Invalid marks"

   end select
   print*, "Your marks is ", marks

end program selectCaseProg
#+END_SRC

**** 嵌套 select case 语句结构
#+BEGIN_SRC fortran
select case(a)

   case (100)
      print*, "This is part of outer switch", a

   select case(b)
      case (200)
         print*, "This is part of inner switch", a

   end select

end select
#+END_SRC

*** 循环结构
| 循环类型     | 描述                                                               |
|--------------+--------------------------------------------------------------------|
| do循环       | 该构建体使得语句或一系列语句迭代进行，当一个给定的条件为真。       |
| do while循环 | 重复声明语句或一组，当给定的条件为真。它测试的条件执行循环体之前。 |
| 内嵌循环     | 可以使用一个或多个循环结构在其他循环结构里面。                     |

循环控制语句
| 控制语句 | 描述                                                                                       |
|----------+--------------------------------------------------------------------------------------------|
| exit     | 如果被执行exit语句则会退出该循环，并且该程序的继续执行第一个可执行语句结束之后的语句执行。 |
| cycle    | 如果执行了一个循环语句，则程序继续到下一次迭代的起始位置。                                 |
| stop     | 如果想执行的程序停止，可以插入声明一个stop语句                                             |
**** do 循环
#+BEGIN_SRC fortran
do var = start, stop [,step]
   ! statement(s)
   …
end do
#+END_SRC
*示例：1到10的阶乘*
#+BEGIN_SRC fortran
program factorial
implicit none

   ! define variables
   integer :: nfact = 1
   integer :: n

   ! compute factorials
   do n = 1, 10
      nfact = nfact * n
      ! print values
      print*,  n, " ", nfact
   end do

end program factorial
#+END_SRC

**** do...while循环
#+BEGIN_SRC fortran
do while (logical expr)
   statements
end do
#+END_SRC
*示例*
#+BEGIN_SRC fortran
program factorial
implicit none

   ! define variables
   integer :: nfact = 1
   integer :: n = 1

   ! compute factorials
   do while (n <= 10)
      nfact = nfact * n
      n = n + 1
      print*,  n, " ", nfact
   end do
end program factorial
#+END_SRC

**** 嵌套循环
#+BEGIN_SRC fortran
iloop: do i = 1, 3
   print*, "i: ", i

   jloop: do j = 1, 3
      print*, "j: ", j

      kloop: do k = 1, 3
         print*, "k: ", k

      end do kloop
   end do jloop
end do iloop
#+END_SRC
*示例*
#+BEGIN_SRC fortran
program nestedLoop
implicit none

   integer:: i, j, k

   iloop: do i = 1, 3
      jloop: do j = 1, 3
         kloop: do k = 1, 3

            print*, "(i, j, k): ", i, j, k

         end do kloop
      end do jloop
   end do iloop

end program nestedLoop
#+END_SRC

**** exit 语句
#+BEGIN_SRC fortran
program nestedLoop
implicit none

integer:: i, j, k
   iloop: do i = 1, 3
      jloop: do j = 1, 3
         kloop: do k = 1, 3

         print*, "(i, j, k): ", i, j, k

         if (k==2) then
            exit jloop
         end if

         end do kloop
      end do jloop
   end do iloop

end program nestedLoop
#+END_SRC

**** Cycle语句(相当于 MATLAB 的 continue)
#+BEGIN_SRC fortran
program cycle_example
implicit none

   integer :: i

   do i = 1, 20

      if (i == 5) then
         cycle
      end if

   print*, i
   end do

end program cycle_example
#+END_SRC

**** stop 语句
#+BEGIN_SRC fortran
program stop_example
implicit none

   integer :: i
   do i = 1, 20

      if (i == 5) then
         stop
      end if

      print*, i
   end do

end program stop_example
#+END_SRC
*执行结果*
#+BEGIN_SRC fortran
1
2
3
4
#+END_SRC
